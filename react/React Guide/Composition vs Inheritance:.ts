`# Composition vs Inheritance
**컴포지션(Composition)**과 **상속(Inheritance)**은 
객체 지향 프로그래밍에서 코드 재사용과 확장을 위한 대표적인 방법이다
React에서는 컴포넌트를 재사용 가능하고 유지보수하기 쉽게 설계하기 위해 
상속보다는 컴포지션을 사용하는 것을 권장함

## 컴포지션 (Composition)
컴포지션은 여러 작은 컴포넌트를 결합하여 더 큰 기능을 가진 컴포넌트를 만드는 방식
이 방식에서는 다양한 기능을 가진 컴포넌트를 작은 단위로 분리하고, 
필요한 곳에서 이러한 작은 단위의 컴포넌트를 조합하여 복잡한 기능을 구현함
이는 독립적인 컴포넌트를 모듈처럼 재사용할 수 있게 하여 유지보수성을 높이고, 
테스트하기도 용이하게 만들어준다

### 컴포지션의 장점:

#### 저장소 결합도 낮음: 부모와 자식 컴포넌트 간 결합도가 낮기 때문에 각 컴포넌트를 독립적으로 수정할 수 있다
#### 유연성: 컴포넌트의 유연한 재사용과 확장이 가능합니다. 이를 통해 다양한 레이아웃을 쉽게 만들 수 있다
#### 테스트 용이성: 컴포넌트를 작게 나누고, 각 컴포넌트를 독립적으로 테스트할 수 있어 전체 코드의 안정성이 높아진다
예시:
`;
function FancyBorder(props) {
  return (
    <div className={"FancyBorder FancyBorder-" + props.color}>
      {props.children}
    </div>
  );
}

function Dialog() {
  return (
    <FancyBorder color="blue">
      <h1 className="Dialog-title">Welcome</h1>
      <p className="Dialog-message">Thank you for visiting our spacecraft!</p>
    </FancyBorder>
  );
}
`
위 예시에서 FancyBorder 컴포넌트는 children prop을 사용하여 어떤 내용이든 감쌀 수 있도록 만들어졌다
이는 컴포넌트가 재사용 가능하고 확장 가능한 구조로 만들어졌음을 보여줌

## 상속 (Inheritance)
상속은 하나의 클래스가 다른 클래스로부터 속성과 메서드를 물려받는 것을 의미
상속은 객체 지향 프로그래밍의 대표적인 개념으로, 
부모 클래스의 기능을 자식 클래스가 물려받아 재사용하거나 확장할 수 있는 강력한 방법이다

그러나 React에서는 상속을 잘 사용하지 않는다
그 이유는 컴포넌트의 재사용성과 유지보수성이 떨어지기 때문

### 상속의 단점:

#### 높은 결합도: 상속을 통해 부모와 자식 컴포넌트가 강하게 결합되면, 부모 컴포넌트의 변경이 자식 컴포넌트에 영향을 미쳐 수정이 어려워질 수 있다
#### 유연성 부족: 컴포넌트의 기능을 확장하거나 재사용할 때 상속을 사용하는 것은 컴포넌트의 구조를 제한적이게 만들 수 있다
#### 복잡성 증가: 상속이 여러 단계로 이루어질 경우, 유지보수가 어려워지고 컴포넌트 간의 의존성이 높아져 코드가 복잡해진다

## React에서 상속보다 컴포지션을 선호하는 이유
React는 UI를 구축하는 과정에서 컴포넌트를 독립적이고 
작은 단위로 나누어 이를 조합하여 큰 UI를 구성하는 것을 지향함
상속보다는 컴포지션을 사용하여 컴포넌트를 재사용하고 확장하는 것이 권장되는 이유는 다음과 같다

### 명확한 역할 분리: 상속은 부모 클래스의 기능을 자식 클래스에서 재사용하기 때문에, 
컴포넌트 간의 역할이 불명확해지고 변경이 어려워질 수 있다
반면 컴포지션은 각 컴포넌트가 명확한 역할을 가지며, 독립적으로 개발하고 유지할 수 있다

### 다중 컴포넌트 확장: 컴포지션을 사용하면 여러 기능을 필요에 따라 결합하여 사용할 수 있다
이는 하나의 컴포넌트가 다중 컴포넌트의 기능을 상속받아야 할 때 발생하는 문제(다중 상속 문제)를 피할 수 있다

### 재사용성: 컴포지션을 사용하면 특정 기능을 여러 컴포넌트에서 쉽게 재사용할 수 있다
컴포넌트의 구성을 변경할 때에도 유연하게 대처할 수 있다
예를 들어, 동일한 레이아웃을 여러 페이지에서 사용하고 싶다면, 
상속보다는 컴포지션으로 각 부분을 나누어 재사용하는 것이 훨씬 효율적

예시로 보는 컴포지션과 상속의 차이
상속을 사용한 설계:

`;
class Button extends React.Component {
  render() {
    return <button className="primary-btn">{this.props.label}</button>;
  }
}

class IconButton extends Button {
  render() {
    return (
      <button className="icon-btn">
        <i className="icon"></i>
        {this.props.label}
      </button>
    );
  }
}
`
위 예시에서 IconButton은 Button을 상속받아 버튼에 아이콘을 추가하는 방식으로 확장했다 
이렇게 하면 부모 컴포넌트인 Button이 변경될 때 IconButton도 영향을 받게 된다

컴포지션을 사용한 설계:

`;
function Button({ label }) {
  return <button className="primary-btn">{label}</button>;
}

function IconButton({ icon, label }) {
  return (
    <button className="icon-btn">
      <i className={icon}></i>
      {label}
    </button>
  );
}
`
컴포지션을 사용한 설계에서는 Button과 IconButton이 서로 독립적이기 때문에,
서로 영향을 받지 않고 쉽게 확장할 수 있다
이는 코드의 유연성과 유지보수성을 크게 향상시킨다

## 결론
React에서는 컴포지션을 통해 컴포넌트를 설계하는 것이 유지보수성과 확장성 측면에서 더 유리하다
컴포지션은 개별 컴포넌트를 명확하게 정의하고 재사용 가능하게 만들어 코드의 결합도를 낮추고 유연성을 높여준다
따라서 React에서 상속보다는 컴포지션을 사용해 컴포넌트를 설계하는 것이 일반적인 권장사항

React 팀도 공식 문서에서 상속을 지양하고 컴포지션을 사용하도록 권장하고 있으며, 
이를 통해 컴포넌트를 좀 더 쉽게 관리하고 재사용할 수 있는 구조를 만들 수 있다`;
